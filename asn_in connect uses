#! /bin/ksh
#-------------------------------------------------------------------------
#  File :  int_asn_in.ksh
#  usage:  int_asn_in.ksh calls consume for ASN_IN
#-------------------------------------------------------------------------
pgmName=`basename $0`
pgmName=${pgmName##*/}    # remove the path
pgmExt=${pgmName##*.}     # get the extension
pgmName=${pgmName%.*}     # get the program name
pgmPID=$$                 # get the process ID
exeDate=`date +"%h_%d"`   # get the execution date
LOGFILE="${LOGDIR}/$exeDate.log"
ERRORFILE="${ERROR}/err.$pgmName."$exeDate
ERRINDFILE=err.ind
USERID=`whoami`

# Initialize number of parallel threads
parallelThreads=20
OK=0
FATAL=255

USAGE="Usage: `basename $0` <connect> \n"

#-------------------------------------------------------------------------
# Function Name: LOG_ERROR
# Purpose      : Log the error messages to the error file.
#-------------------------------------------------------------------------
function LOG_ERROR
{
   errMsg=`echo $1`       # echo message to a single line
   errFunc=$2
   retCode=$3

   dtStamp=`date +"%G%m%d%H%M%S"`
   echo "$pgmName~$dtStamp~$errFunc~$errMsg" >> $ERRORFILE
  if [[ $retCode -eq ${FATAL} ]];  then
      LOG_MESSAGE "Aborted in" $errFunc $retCode
   fi
   return $retCode
}

#-------------------------------------------------------------------------
# Function Name: LOG_MESSAGE
# Purpose      : Log the  messages to the log file.
#-------------------------------------------------------------------------
function LOG_MESSAGE
{
   logMsg=`echo $1`       # echo message to a single line
   logFunc=$2
   retCode=$3

   dtStamp=`date +"%a %b %e %T"`
   echo "$dtStamp Program: $pgmName: PID=$pgmPID: $logMsg $logFunc" >> $LOGFILE
   return $retCode
}
#providing permission:
if [ ! -f "$LOGFILE" ]
  then
    touch ${LOGFILE}
    chmod 666 ${LOGFILE}
fi #! -f "$LOGFILE"
#-----------------------------------------------
# Main program starts 
# Parse the command line
#-----------------------------------------------

# Test for the number of input arguments
if [ $# -lt 1 ]
then
   echo $USAGE
   exit 1
fi

CONNECT=$1

LOG_MESSAGE "Started by ${USERID}"

export Res_File="/retail/psmbatch/tmp/int_pack_exe_ASN_IN.res"
> ${Res_File}
 sh -x ${SRC}/int_generic_on_off.ksh $CONNECT "ASN_IN"
if [ $? -eq 0 ]
 then

LOG_MESSAGE "ASN_IN Generic ON" 
 
sqlplus -s ${CONNECT} <<EOF
set pages 0 lines 120 trimout on trimspool on tab off echo off verify off feed on serverout on
spool ${Res_File}
whenever sqlerror exit SQL.SQLCODE
EXEC intg_consume_msg('ASN_IN');
EXIT
EOF

Pack_Chk=`grep 'PL/SQL procedure successfully completed' ${Res_File} | wc -l | bc `

if [ ${Pack_Chk} -ne 0 ]
   then
   LOG_MESSAGE "Execution successfull for intg_consume_msg('ASN_IN')"
   exit ${OK}
fi

LOG_ERROR "Execution failed for intg_consume_msg('ASN_IN')"
exit ${FATAL}

fi

LOG_MESSAGE "ASN_IN Generic OFF"
exit ${OK}
